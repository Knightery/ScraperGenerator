#!/usr/bin/env python3
"""
Generated by AI Navigator
URL: https://careers.wipfli.com/all-openings?categories=Entry-Level%2FInternships
Generated at: 2025-10-05T19:05:24.529257
"""

import logging
import sys
import os

# Add the parent directory to the path to import our modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from playwright_scraper import PlaywrightScraperSync
from supabase_database import SupabaseDatabaseManager

def setup_logging():
    """Setup logging for the scraper."""
    import os
    os.makedirs('logs', exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f'logs/wipfli_scraper.log'),
            logging.StreamHandler()
        ]
    )

def get_scraper_config():
    """Get the scraper configuration for {company_name}."""
    return {
        'company_name': 'wipfli',
        'scrape_url': 'https://careers.wipfli.com/all-openings?categories=Entry-Level%2FInternships',
        'job_container_selector': 'ul.sui-results-container > li.sui-result',
        'title_selector': 'h3 > a',
        'url_selector': 'h3 > a',
        'description_selector': '',
        'location_selector': 'div.MuiBox-root.css-1ic066d span.MuiChip-label',
        'requirements_selector': '',
        'pagination_selector': 'nav.MuiPagination-root button[aria-label="Go to next page"]',
        'has_dynamic_loading': True,
        'search_required': True,
        'search_input_selector': '',
        'search_submit_selector': '.sui-layout-sidebar div[role="button"]:has(span.MuiChip-label:text("Internships"))',
        'search_query': '',
        'text_filter_keywords': '',
        'max_pages': 999  # Unlimited - will stop automatically based on end conditions
    }

def main():
    """Main scraper function."""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("Starting wipfli job scraper...")
    
    config = get_scraper_config()
    
    # Initialize database-enabled scraper
    scraper = PlaywrightScraperSync(use_database=True)
    db_manager = SupabaseDatabaseManager()
    
    # Get company info from database
    company = db_manager.get_company_by_name('wipfli')
    if not company:
        logger.error("Company '{company_name}' not found in database")
        print("Error: Company not found in database. Please add the company first.")
        return
    
    # Scrape jobs and get filtered HTML
    jobs, filtered_html = scraper.scrape_jobs(config['scrape_url'], config)
    
    if jobs:
        logger.info(f"Successfully scraped {len(jobs)} jobs from 'wipfli'")
        
        # Print summary
        print(f"\\n=== SCRAPING RESULTS ===")
        print(f"Company: 'wipfli'")
        print(f"URL: 'https://careers.wipfli.com/all-openings?categories=Entry-Level%2FInternships'")
        print(f"Jobs found: {len(jobs)}")
        print(f"Jobs saved to database: jobs.db")
        
        # Show sample jobs
        print(f"\\n=== SAMPLE JOBS ===")
        for i, job in enumerate(jobs[:3], 1):
            print(f"{i}. {job.get('title', 'No title')}")
            print(f"   Location: {job.get('location', 'Not specified')}")
            print(f"   URL: {job.get('url', 'No URL')}")
            print()
        
    else:
        logger.warning("No jobs found - scraper may need adjustment")
        print("No jobs found. The scraper configuration may need to be adjusted.")
        
        # Log failed scraper execution
        db_manager.log_scraper_execution(
            company['id'], 
            0, 
            success=False,
            error_message="No jobs found"
        )

if __name__ == "__main__":
    main()
